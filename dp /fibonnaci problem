// we solved this number using the recursion 
// f(5) recursion tree = f(4) + f(3)
                         /\      / \ 
                      f(3) f(2) f(2) f(1)
                       f(1) =1 and f(0) =0 // this is the base case we assumed it 

// in this code we have previously calculated f(3) and f(2) so we donot need to calculate again it is actually repeation
step 1: forget about the dp and write the recursive code
step 2: now convert the recursive code into dp , so now in this recursive code we will add the memosation (1 create dp array , 2 create haspmap
step 3: check do the ans is already stored in array or not 

      // recursive code - copy and past the recursive code into fib into other fib code 
//  class Solution {
//     public int fib(int n) {
      
//       if(n==0 || n==1)
//       {
//         return n;
//       }
//       return fib(n-1)+fib(n-2);
//     }
// }


// THIS IS TOPDOWN APPROACH  
 // RECURSION + MEMORISATION   // while creating the dp array u need to find what will be the size of dp array and what all base condition  
                               // what all base conditions it can have 

class Solution {
    int fib (int n , int dp[]) {
         // base case
         if(n<=1)  // if(n==1 || n==0 )
             return n;

         // step 3: check if ans already exist 
          if(dp[n] != -1)  return  dp[n];   
  
    
    // step 2: replace ans or return with dp[n]
      dp[n]= fib(n-1, dp)+fib(n-2, dp); 
      return dp[n];   

    }
    public int fib(int n) {
      int dp[]= new int [n+1];
      // Initialize the dp array with -1 // so that we can check that dp is full of not 
        for (int i = 0; i <= n; i++) {
            dp[i] = -1;
        }

      
      int ans = fib (n, dp);

        return ans;
    }
}   


// THIS IS  BOTTOM-UP APPROACH 
  
   class Solution {
     int BottomUpSolve (int n)
     {
         // step 1 : create a dp array
         int dp[] = new int [n+1];

          for(int i=0;i<=n;i++)  dp[i]=-1; // in arraylist u can intialise it directly 
         // step 2: observe the base case in the above solution 
          dp[0] =0;
          if(n==0) return dp[0];
          dp[1] =1;
         if(n==1) return dp[1];

         // step 3: check that previous approach was how build 
         for(int i=2;i<=n;i++)
         {
           dp[i] = dp[i-1] +dp [i-2];  
         }

         return dp[n];

     }
    public int fib(int n) {
            return BottomUpSolve(n);
    } 
}
                       

// SPACE OPTIMISED SOLUTION as we closely obsereved that we donot required it array we just required the create entire array
// we just want to store the previous two array 


/// IN SPACE OPTIMISATION U NEED TO CHECK THAT i VALUE DEPENDS ON WHICH PARAMETER AND THEN OPTIMSE THEM by finding the pattern 
class Solution {
     int spaceoptimseSol (int n)
     {
         //base case
          int prev2 =0;
          int prev1 = 1;
      

         // step 2: observe the base case in the above solution 
         
          if(n==0) return prev2;
        
         if(n==1) return prev1;
         int curr=0;

         // step 3: check that previous approach was how build 
         for(int i=2;i<=n;i++)
         {
           curr= prev1 + prev2; 
          
           //shifting 
           prev2 = prev1; 
           prev1 = curr;
         }

         return curr;

     }
    public int fib(int n) {
            return spaceoptimseSol(n);
    } 
}
